name: Publish to Launchpad PPA

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: true
        type: string

jobs:
  publish-ppa:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu_series: 
          - 'noble'    # 24.04 LTS
          - 'mantic'   # 23.10
          - 'lunar'    # 23.04 (EOL but some still use)
          - 'jammy'    # 22.04 LTS
          - 'kinetic'  # 22.10 (EOL but some still use)
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate semver input
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid semver format. Expected format: X.Y.Z"
            exit 1
          fi

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            devscripts \
            build-essential \
            dput \
            gnupg2 \
            dh-make \
            fakeroot \
            lintian

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/private.key
          echo "${{ secrets.GPG_PUBLIC_KEY }}" > /tmp/public.key
          gpg --batch --import /tmp/private.key
          gpg --batch --import /tmp/public.key
          rm -f /tmp/private.key /tmp/public.key

      - name: Setup GPG agent
        run: |
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          
          gpg-connect-agent reloadagent /bye

      - name: Create source package directory
        env:
          VERSION: ${{ github.event.inputs.version }}
          UBUNTU_SERIES: ${{ matrix.ubuntu_series }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          DEBIAN_VERSION="${VERSION}-1ppa1~${UBUNTU_SERIES}1"
          # Create source directory
          mkdir -p "nx-${VERSION}"
          
          rsync -av --exclude='.git*' --exclude='*.deb' --exclude='*.tar.gz' --exclude='*.changes' \
            --exclude='*.dsc' --exclude='*.buildinfo' \
            ./ "nx-${VERSION}/" || true

          cd "nx-${VERSION}"

          cat > debian/changelog << EOF
          nx (${DEBIAN_VERSION}) ${UBUNTU_SERIES}; urgency=medium

            * Release version ${VERSION}
            * Automated PPA build from GitHub Actions
            * Built for Ubuntu ${UBUNTU_SERIES}
            * Upstream release: https://github.com/nrwl/nx/releases/tag/${VERSION}

           -- ${{ secrets.MAINTAINER_NAME }} <${{ secrets.MAINTAINER_EMAIL }}>  $(date -R)

          EOF

          debuild -S -sa \
            -k"$GPG_KEY_ID" \
            -p"gpg --batch --passphrase '${{ secrets.GPG_PASSPHRASE }}' --pinentry-mode loopback"

      - name: Configure dput
        run: |
          mkdir -p ~/.dput.cf
          cat > ~/.dput.cf << EOF
          [my-ppa]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~$LAUNCHPAD_USERNAME/nx/ubuntu/
          login = anonymous
          allow_unsigned_uploads = 0
          EOF

      # - name: Upload to PPA
      #   run: |
      #     # Find the changes file
      #     CHANGES_FILE=$(find . -name "nx_${{ github.event.inputs.version }}-1ppa1~${{ matrix.ubuntu_series }}1_source.changes")
          
      #     if [ -z "$CHANGES_FILE" ]; then
      #       echo "Error: Could not find .changes file"
      #       find . -name "*.changes"
      #       exit 1
      #     fi
          
      #     echo "Uploading: $CHANGES_FILE for ${{ matrix.ubuntu_series }}"
      #     dput my-ppa "$CHANGES_FILE"

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: build-artifacts-${{ github.event.inputs.version }}-${{ matrix.ubuntu_series }}
      #     path: |
      #       *.deb
      #       *.dsc
      #       *.tar.gz
      #       *.changes
      #       *.buildinfo

      - name: Summary
        run: |
          echo "## PPA Upload Summary - ${{ matrix.ubuntu_series }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ubuntu Series**: ${{ matrix.ubuntu_series }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PPA**: ppa:$LAUNCHPAD_USERNAME/nx" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: nx_${{ github.event.inputs.version }}-1ppa1~${{ matrix.ubuntu_series }}1" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The package has been uploaded to Launchpad and will be built automatically." >> $GITHUB_STEP_SUMMARY
          echo "Check the build status at: https://launchpad.net/~$LAUNCHPAD_USERNAME/+archive/ubuntu/nx" >> $GITHUB_STEP_SUMMARY
